# Generated by Django 5.0 on 2024-01-10 05:51

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accession',
            fields=[
                ('uniprot_accession', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('fasta_seq', models.TextField()),
                ('is_isofrom', models.BooleanField(default=False)),
                ('refseq_accession', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CellOrTissue',
            fields=[
                ('c_type', models.CharField(choices=[('C', 'C'), ('T', 'T')], max_length=25, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='CellTypeDisease',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ClassOneSite',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Enrichment',
            fields=[
                ('method', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ExpCondition',
            fields=[
                ('utf8_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ExpressionStatus',
            fields=[
                ('expression', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ExpressionVal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p_value', models.CharField(max_length=255)),
                ('ratio', models.CharField(max_length=255)),
                ('log2_fc', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Genes',
            fields=[
                ('gene_symbol', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='LocalizationProb',
            fields=[
                ('value', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='MassSpec',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ModifSequence',
            fields=[
                ('seq', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='PeptideSequence',
            fields=[
                ('seq', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Pmid',
            fields=[
                ('pmid', models.BigIntegerField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileOrDiff',
            fields=[
                ('name', models.CharField(choices=[('profiling', 'profiling'), ('Differential', 'Differential')], max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='QuantType',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='AcceesionPhosphosites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='accession_phosphosite_ACC', to='phosphodb_api.accession')),
            ],
        ),
        migrations.CreateModel(
            name='ExpConditionAccession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accession', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_accession_ACC', to='phosphodb_api.accession')),
                ('exp_condition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_accession_EXP', to='phosphodb_api.expcondition')),
            ],
            options={
                'unique_together': {('exp_condition', 'accession')},
            },
        ),
        migrations.AddField(
            model_name='expcondition',
            name='accession',
            field=models.ManyToManyField(related_name='exp_condtion_accession', through='phosphodb_api.ExpConditionAccession', to='phosphodb_api.accession'),
        ),
        migrations.AddField(
            model_name='accession',
            name='exp_condition',
            field=models.ManyToManyField(related_name='accession_exp_condition', through='phosphodb_api.ExpConditionAccession', to='phosphodb_api.expcondition'),
        ),
        migrations.CreateModel(
            name='ExpConditionClassOneSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_One_site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_class_one_site_COS', to='phosphodb_api.classonesite')),
                ('exp_condition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_class_one_site_EXP', to='phosphodb_api.expcondition')),
            ],
            options={
                'unique_together': {('exp_condition', 'class_One_site')},
            },
        ),
        migrations.AddField(
            model_name='expcondition',
            name='class_one_site',
            field=models.ManyToManyField(related_name='exp_condtion_class_one_site', through='phosphodb_api.ExpConditionClassOneSite', to='phosphodb_api.classonesite'),
        ),
        migrations.CreateModel(
            name='ExpConditionEnrichment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrichment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_enrichment_EN', to='phosphodb_api.enrichment')),
                ('exp_condition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_enrichment_EXP', to='phosphodb_api.expcondition')),
            ],
            options={
                'unique_together': {('exp_condition', 'enrichment')},
            },
        ),
        migrations.AddField(
            model_name='expcondition',
            name='enrichment',
            field=models.ManyToManyField(related_name='exp_condtion_enrichment', through='phosphodb_api.ExpConditionEnrichment', to='phosphodb_api.enrichment'),
        ),
        migrations.CreateModel(
            name='ExpressionValExpressionStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expression_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='expression_val_expression_status_ES', to='phosphodb_api.expressionstatus')),
                ('expression_val', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='expression_val_expression_status_EV', to='phosphodb_api.expressionval')),
            ],
            options={
                'unique_together': {('expression_val', 'expression_status')},
            },
        ),
        migrations.AddField(
            model_name='expressionval',
            name='expression_status',
            field=models.ManyToManyField(related_name='expression_val_expression_status', through='phosphodb_api.ExpressionValExpressionStatus', to='phosphodb_api.expressionstatus'),
        ),
        migrations.AddField(
            model_name='accession',
            name='gene_symbol',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='phosphodb_api.genes'),
        ),
        migrations.AddField(
            model_name='expcondition',
            name='mass_spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='phosphodb_api.massspec'),
        ),
        migrations.CreateModel(
            name='Phosphosite',
            fields=[
                ('site', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('accession', models.ManyToManyField(related_name='phosphosite_accession', through='phosphodb_api.AcceesionPhosphosites', to='phosphodb_api.accession')),
            ],
        ),
        migrations.AddField(
            model_name='accession',
            name='phosphosite',
            field=models.ManyToManyField(related_name='accession_phosphosite', through='phosphodb_api.AcceesionPhosphosites', to='phosphodb_api.phosphosite'),
        ),
        migrations.AddField(
            model_name='acceesionphosphosites',
            name='phosphosite',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='accession_phosphosite_PH', to='phosphodb_api.phosphosite'),
        ),
        migrations.CreateModel(
            name='PhosphositeExpressionVal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expression_val', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_ExpressionVal_EV', to='phosphodb_api.expressionval')),
                ('phosphosite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_ExpressionVal_PH', to='phosphodb_api.phosphosite')),
            ],
            options={
                'unique_together': {('phosphosite', 'expression_val')},
            },
        ),
        migrations.AddField(
            model_name='phosphosite',
            name='expression_val',
            field=models.ManyToManyField(related_name='phosphosite_expression_val', through='phosphodb_api.PhosphositeExpressionVal', to='phosphodb_api.expressionval'),
        ),
        migrations.CreateModel(
            name='PhosphositeLocalizationProb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('localization_prob', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_localization_prob_LP', to='phosphodb_api.localizationprob')),
                ('phosphosite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_localization_prob_PH', to='phosphodb_api.phosphosite')),
            ],
            options={
                'unique_together': {('phosphosite', 'localization_prob')},
            },
        ),
        migrations.AddField(
            model_name='phosphosite',
            name='localization_prob',
            field=models.ManyToManyField(related_name='phosphosite_localization_prob', through='phosphodb_api.PhosphositeLocalizationProb', to='phosphodb_api.localizationprob'),
        ),
        migrations.CreateModel(
            name='PhosphositeModifSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modif_sequence', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_modif_sequence_MS', to='phosphodb_api.modifsequence')),
                ('phosphosite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_modif_sequence_PH', to='phosphodb_api.phosphosite')),
            ],
            options={
                'unique_together': {('phosphosite', 'modif_sequence')},
            },
        ),
        migrations.AddField(
            model_name='phosphosite',
            name='modif_sequence',
            field=models.ManyToManyField(related_name='phosphosite_modif_sequence', through='phosphodb_api.PhosphositeModifSequence', to='phosphodb_api.modifsequence'),
        ),
        migrations.CreateModel(
            name='PhosphositePeptideSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('peptide_sequence', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_peptideSequence_PS', to='phosphodb_api.peptidesequence')),
                ('phosphosite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='phosphosite_peptideSequence_PH', to='phosphodb_api.phosphosite')),
            ],
            options={
                'unique_together': {('phosphosite', 'peptide_sequence')},
            },
        ),
        migrations.AddField(
            model_name='phosphosite',
            name='peptide_sequence',
            field=models.ManyToManyField(related_name='phosphosite_peptide_sequence', through='phosphodb_api.PhosphositePeptideSequence', to='phosphodb_api.peptidesequence'),
        ),
        migrations.AddField(
            model_name='expcondition',
            name='pmid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='phosphodb_api.pmid'),
        ),
        migrations.CreateModel(
            name='PmidCellOrTissue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_or_tissue', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pmid_cell_Or_tissue_CT', to='phosphodb_api.cellortissue')),
                ('pmid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pmid_cell_Or_tissue_PM', to='phosphodb_api.pmid')),
            ],
            options={
                'unique_together': {('pmid', 'cell_or_tissue')},
            },
        ),
        migrations.AddField(
            model_name='pmid',
            name='cell_or_tissue',
            field=models.ManyToManyField(related_name='pmid_cell_or_tissue', through='phosphodb_api.PmidCellOrTissue', to='phosphodb_api.cellortissue'),
        ),
        migrations.CreateModel(
            name='PmidCellTypeDisease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_type_disease', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pmid_cell_type_disease_CTD', to='phosphodb_api.celltypedisease')),
                ('pmid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pmid_cell_type_disease_PM', to='phosphodb_api.pmid')),
            ],
            options={
                'unique_together': {('pmid', 'cell_type_disease')},
            },
        ),
        migrations.AddField(
            model_name='pmid',
            name='Cell_type_disease',
            field=models.ManyToManyField(related_name='pmid_cell_type_disease', through='phosphodb_api.PmidCellTypeDisease', to='phosphodb_api.celltypedisease'),
        ),
        migrations.CreateModel(
            name='PmidProfileOrDiff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pmid', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pmid_profile_diff_PM', to='phosphodb_api.pmid')),
                ('profile_or_diff', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pmid_profile_diff_POD', to='phosphodb_api.profileordiff')),
            ],
            options={
                'unique_together': {('pmid', 'profile_or_diff')},
            },
        ),
        migrations.AddField(
            model_name='pmid',
            name='profile_or_diff',
            field=models.ManyToManyField(related_name='pmid_cell_profile_or_diff', through='phosphodb_api.PmidProfileOrDiff', to='phosphodb_api.profileordiff'),
        ),
        migrations.CreateModel(
            name='ExpConditionQuantType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exp_condition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_quant_type_EXP', to='phosphodb_api.expcondition')),
                ('quant_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exp_condition_quant_type_QT', to='phosphodb_api.quanttype')),
            ],
            options={
                'unique_together': {('exp_condition', 'quant_type')},
            },
        ),
        migrations.AddField(
            model_name='expcondition',
            name='quant_type',
            field=models.ManyToManyField(related_name='exp_condtion_quant_type', through='phosphodb_api.ExpConditionQuantType', to='phosphodb_api.quanttype'),
        ),
        migrations.AddField(
            model_name='accession',
            name='species',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='phosphodb_api.species'),
        ),
        migrations.AlterUniqueTogether(
            name='acceesionphosphosites',
            unique_together={('accession', 'phosphosite')},
        ),
    ]
